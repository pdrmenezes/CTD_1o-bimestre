// fun√ß√µes s√£o sequ√™ncias de a√ß√µes que ser√£o executadas quando necess√°rio

//fun√ß√£o declarada: declara-se a fun√ß√£o usando o 'function'
 function dobro(umNumero) {
     console.log(umNumero * 2);
 }

 dobro(2);

 function darOi() {
     console.log("Ol√° mundo");
 }

 darOi();

 // fun√ß√£o expressa: s√£o fun√ß√µes atribu√≠das colo calor de uma vari√°vel. a fun√ß√£o em si, n√£o tem nome, √© uma fun√ß√£o an√¥nima e pode ser chamada pelo nome da vari√°vel. declara-se uma vari√°vel e atribui-se a ela uma fun√ß√£o. entre os par√™nteses, determina-se o(s) par√¢metros da fun√ß√£o
 let somar1e1 = function(){
     console.log(1+1);
 }

 somar1e1();

 let somar = function(numero1, numero2){
    console.log(numero1+numero2);
}

somar(1, 2); // se eu n√£o forne√ßo os 2 par√¢metros o output √© NaN (Not A Number). os par√¢metros t√™m que ser separados por v√≠rgulas

// fun√ß√µes com 'return' n√£o geram nenhum output, s√≥ guardam o resultado da fun√ß√£o e, pra usar esse retorno, deve-se criar uma vari√°vel que busque o que foi retornado da fun√ß√£o

function fazerSorvete(quantidade){
    return 'üç¶'.repeat(quantidade);
}
let meusSorvetes = fazerSorvete(3);
console.log(meusSorvetes);


 // escopo de uma fun√ß√£o local

 function multiplicar(numero1, numero2){
     let resultado = numero1*numero2;
 }
console.log(resultado); // retorna um erro de que a vari√°vel 'resultado' s√≥ existe dentro do escopo da fun√ß√£o

// se o console.log for pra dentro da fun√ß√£o, a√≠ sim ele consegue retornar a vari√°vel 'resultado'

function multiplicar(numero1, numero2){
    let resultado = numero1*numero2;
    console.log(resultado);
}

// o escopo local consegue acessar o escopo global, j√° o global n√£o consegue acessar o escopo local. eu posso criar uma vari√°vel que j√° existe no escopo global, localmente, e o escopo local utilizar√° essa vari√°vel sem interferir com a do escopo global

// par√¢metros padr√£o para uma fun√ß√£o
function bemVindo(nome = 'visitante', sobrenome ='secreto') {
    return 'ol√°, ' + nome + ' ' + sobrenome;
}
bemVindo();